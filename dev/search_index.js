var documenterSearchIndex = {"docs":
[{"location":"#BezierBernsteinMethods","page":"Home","title":"BezierBernsteinMethods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package implements Bezier-Bernstein methods on simplicial meshes.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Kirby, R.C. Fast simplicial finite element algorithms using Bernstein polynomials. Numer. Math. 117, 631–652 (2011). https://doi.org/10.1007/s00211-010-0327-2\nMark Ainsworth, Gaelle Andriamaro, and Oleg Davydov. Bernstein-Bézier Finite Elements of Arbitrary Order and Optimal Assembly Procedures. SIAM J. Sci. Comput. 33, 6 (November 2011), 3087–3109. https://doi.org/10.1137/11082539X\nKirby, R.C. Low-Complexity Finite Element Algorithms for the de Rham Complex on Simplices. SIAM Journal on Scientific Computing 36:2, A846-A868 (2014). https://doi.org/10.1137/130927693","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#BezierBernsteinMethods.Binomial-Union{Tuple{K}, Tuple{N}, Tuple{Val{N}, Val{K}}} where {N, K}","page":"Home","title":"BezierBernsteinMethods.Binomial","text":"Binomial(Val(n), Val(k)) = binomial(n,k)\n\n@generated function for optimized computation of binomials.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.b2c-Tuple{BezierBernsteinMethods.AbstractSimplex}","page":"Home","title":"BezierBernsteinMethods.b2c","text":"b2c(simplex)\n\nReturn the mapping (matrix) that maps barycentric coordinates to Cartesian coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.barycentriccoords-Tuple{BezierBernsteinMethods.AbstractSimplex, Any}","page":"Home","title":"BezierBernsteinMethods.barycentriccoords","text":"barycentriccoords(S::AbstractSimplex, x)\n\nCompute the barycentric coordinates of a point, or matrix of points x.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.bernstein-Union{Tuple{T}, Tuple{D}, Tuple{Integer, AbstractVector{T}, BPoint{D, T}}} where {D, T}","page":"Home","title":"BezierBernsteinMethods.bernstein","text":"bernstein(p::Degree, control::AbstractVector{T}, λ::BPoint{D,T})\n\nCompute Bezier polynomial at barycentric point λ with the degrees of freedom in control.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.bernsteinfuns-Union{Tuple{T}, Tuple{D}, Tuple{X}, Tuple{Val{X}, BPoint{D, T}}} where {X, D, T}","page":"Home","title":"BezierBernsteinMethods.bernsteinfuns","text":"bernstein(X::MultiIndex{D}, λ::BPoint{D,T})\n\nCompute single Bernstein basis function corresponding to multi-index X at barycentric point λ.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.cartesiancoords-Tuple{BezierBernsteinMethods.AbstractSimplex, Any}","page":"Home","title":"BezierBernsteinMethods.cartesiancoords","text":"cartesiancoords(S::AbstractSimplex, λ)\n\nCompute the Cartesian coordinates of a barycentric point or vector of barycentric points λ.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.decasteljau!-Union{Tuple{T}, Tuple{D}, Tuple{Integer, AbstractVector{T}, BPoint{D, T}}} where {D, T}","page":"Home","title":"BezierBernsteinMethods.decasteljau!","text":"decasteljau!(control::Vector{T}, λ::BPoint{D,T}, MultiIndices)\n\nClassic DeCasteljau algorithm (can compute derivatives too!) on a (D-1)-dimensional simplex.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.degree_elevation_operator","page":"Home","title":"BezierBernsteinMethods.degree_elevation_operator","text":"degree_elevation_operator(p::Degree, d::Dimension)\n\nReturn a matrix that maps degrees of freedom of a Bezier polynomial of degree p to the degrees of freedom corresponding to its order elevated Bezier polynomial.\n\n\n\n\n\n","category":"function"},{"location":"#BezierBernsteinMethods.dimension-Union{Tuple{BezierBernsteinMethods.AbstractSimplex{D}}, Tuple{D}} where D","page":"Home","title":"BezierBernsteinMethods.dimension","text":"dimension(simplex)\n\nReturn the dimension of a simplex.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.dimsplinespace-Tuple{Integer, Integer}","page":"Home","title":"BezierBernsteinMethods.dimsplinespace","text":"dimsplinespace(p::Degree, d::Dimension)\n\nCompute the dimension of the Bezier spline space on a simplex of degree p and numer of vertices d.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.grevillepoint-Tuple{NTuple{D, Integer} where D}","page":"Home","title":"BezierBernsteinMethods.grevillepoint","text":"grevillepoint(X::MultiIndex)\n\nCompute Greville point associated with multi-index label X.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.jacobian-Tuple{BezierBernsteinMethods.AbstractSimplex}","page":"Home","title":"BezierBernsteinMethods.jacobian","text":"jacobian(simplex)\n\nReturn the Jacobian mapping of a simplex.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.kformbasisconv-Tuple{Integer, Integer, Integer}","page":"Home","title":"BezierBernsteinMethods.kformbasisconv","text":"kformbasisconv(n::Dimension, k::Form, r::Degree)\n\nCompute the linear mapping from Bernstein polynomials to the space of k-forms Pᵣ⁻Λᵏ(T). This linear mapping is encoded in Pattern{T}. We refer to the paper. For more information, check out the periodic table of finite elements\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.linindex-Tuple{Integer, Integer}","page":"Home","title":"BezierBernsteinMethods.linindex","text":"linindex(i, j, k...)\n\nReturn the linear index of a multi-index label.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.mass_matrix-Union{Tuple{D}, Tuple{BezierBernsteinMethods.AbstractSimplex{D}, Integer, Integer}, Tuple{BezierBernsteinMethods.AbstractSimplex{D}, Integer, Integer, Type{<:Real}}} where D","page":"Home","title":"BezierBernsteinMethods.mass_matrix","text":"mass_matrix(S::AbstractSimplex{D}, p::Degree, q::Degree, T::Type{<:Real} = Type{Float64})\n\nCompute Bernstein mass matrix for degree (p,q) and dimension d.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.multiindex-Union{Tuple{LinearIndex{P, 2, I}}, Tuple{I}, Tuple{P}} where {P, I}","page":"Home","title":"BezierBernsteinMethods.multiindex","text":"MultiIndex(::LinearIndex{P<:Degree, D<:Dimension, I<:Integer})\n\nReturn the multi-index associated with linear index I and simplicial domain of degree P and dimension D.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.step_decasteljau!-Union{Tuple{T}, Tuple{D}, Tuple{Vector{T}, BPoint{D, T}, Any}} where {D, T}","page":"Home","title":"BezierBernsteinMethods.step_decasteljau!","text":"step_decasteljau!(control::Vector{T}, λ::BPoint{D,T}, MultiIndices)\n\nComputes a single step of the recursive DeCasteljau algorithm on a (D-1)-dimensional simplex.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.subsets-Union{Tuple{K}, Tuple{N}, Tuple{NTuple{N, Int64}, Val{K}}} where {N, K}","page":"Home","title":"BezierBernsteinMethods.subsets","text":"subsets(v::NTuple{n,Int}, k::Int)\n\nGenerate the binomial(n,k) unique subsets of length k from set v and its complement.\n\nExamples:\n\njulia> α, β = subsets((1,2,3), 1);\n\njulia> α\n3-element Array{Tuple{Int64},1}:\n (1,)\n (2,)\n (3,)\n\njulia> β\n3-element Array{Tuple{Int64,Int64},1}:\n (2, 3)\n (1, 3)\n (1, 2)\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.vol-Tuple{BezierBernsteinMethods.AbstractSimplex}","page":"Home","title":"BezierBernsteinMethods.vol","text":"vol(simplex)\n\nCompute the volume of an affine simplex.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.BezierSimplex","page":"Home","title":"BezierBernsteinMethods.BezierSimplex","text":" BezierSimplex{D,T<:Real} <: AbstractSimplex{D}\n\nSimplex of dimension D with Vertices in real number type T.\n\n\n\n\n\n","category":"type"},{"location":"#BezierBernsteinMethods.LinearIndex","page":"Home","title":"BezierBernsteinMethods.LinearIndex","text":"LinearIndex(P::Degree, D::Dimension, I::Integer)\n\nA linear index I of a simplicial discretization with Degree P and dimension D.\n\n\n\n\n\n","category":"type"},{"location":"#BezierBernsteinMethods.LinearIndex-Tuple{NTuple{D, Integer} where D}","page":"Home","title":"BezierBernsteinMethods.LinearIndex","text":"LinearIndex(::MultiIndex{X})\n\nCompute the LinearIndex associated with a MultiIndex.\n\n\n\n\n\n","category":"method"},{"location":"#BezierBernsteinMethods.MultiIndices","page":"Home","title":"BezierBernsteinMethods.MultiIndices","text":"MultiIndices(P::Degree, D::Dimension)\nMultiIndices(D::Dimension)\nMultiIndices(s::Simplex)\nMultiIndices(s::BezierSimplex)\n\nReturns an iterator corresponding to a Bezier simplex of polynomial degree P and dimension D.\n\n\n\n\n\n","category":"type"},{"location":"#BezierBernsteinMethods.Simplex","page":"Home","title":"BezierBernsteinMethods.Simplex","text":" Simplex{D,T<:Real} <: AbstractSimplex{D}\n\nSimplex of dimension D with Vertices in real number type T.\n\n\n\n\n\n","category":"type"}]
}
